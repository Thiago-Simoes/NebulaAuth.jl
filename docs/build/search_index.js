var documenterSearchIndex = {"docs":
[{"location":"manual/start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/start/#Prerequisites","page":"Quick Start","title":"Prerequisites","text":"","category":"section"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"Ensure you have Julia installed.\nClone the repository and install dependencies:\nimport Pkg\nPkg.activate(\".\")\nPkg.add(\"https://github.com/Thiago-Simoes/NebulaAuth.jl\")\n\nusing NebulaAuth\n","category":"page"},{"location":"manual/start/#Configuration","page":"Quick Start","title":"Configuration","text":"","category":"section"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"Create a .env file in the repository root with:","category":"page"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"DB_HOST=localhost\nDB_USER=root\nDB_PASSWORD=pass\nDB_NAME=dbname\nDB_PORT=3306\n\nNebulaORM_LOG_LEVEL=error\nNEBULAAUTH_SECRET=your_secret_key_here\nNEBULAAUTH_ALGORITHM=HS512\nNEBULAAUTH_EXPIRATION=3600\nNEBULAAUTH_ISSUER=NebulaAuth\nNEBULAAUTH_DBPREFIX=NebulaAuth_\nNEBULAAUTH_MIN_PASSWORD_ITTERATIONS=25000","category":"page"},{"location":"manual/start/#Initializing-the-Package","page":"Quick Start","title":"Initializing the Package","text":"","category":"section"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"In your Julia script or REPL, load and initialize NebulaAuth:","category":"page"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"using NebulaAuth\nNebulaAuth.init!()  # Loads all modules, including auth and JWT.","category":"page"},{"location":"manual/start/#User-Operations","page":"Quick Start","title":"User Operations","text":"","category":"section"},{"location":"manual/start/#Signing-Up","page":"Quick Start","title":"Signing Up","text":"","category":"section"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"Create a new user with:","category":"page"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"user = NebulaAuth.signup(\"user@example.com\", \"John Doe\", \"securePassword123\")\nprintln(\"User created with UUID: \", user.uuid)","category":"page"},{"location":"manual/start/#Signing-In","page":"Quick Start","title":"Signing In","text":"","category":"section"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"Authenticate a user with:","category":"page"},{"location":"manual/start/","page":"Quick Start","title":"Quick Start","text":"user = NebulaAuth.signin(\"user@example.com\", \"securePassword123\")\nprintln(\"User signed in successfully!\")","category":"page"},{"location":"manual/relationships/#Defining-Relationships","page":"Defining Relationships","title":"Defining Relationships","text":"","category":"section"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"NebulaAuth leverages NebulaORM to create relationships between models. This manual explains how to create related models and query them.","category":"page"},{"location":"manual/relationships/#Creating-Related-Models","page":"Defining Relationships","title":"Creating Related Models","text":"","category":"section"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"You can define relationships by specifying association attributes when creating a model. For example, defining a Profile linked to a user:","category":"page"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"Model(\n    :Profile,\n    [\n        (\"id\", INTEGER(), [PrimaryKey(), AutoIncrement()]),\n        (\"userId\", INTEGER(), []),\n        (\"bio\", TEXT(), []),\n        (\"location\", TEXT(), []),\n        (\"website\", TEXT(), []),\n        (\"created_at\", TIMESTAMP(), [Default(\"CURRENT_TIMESTAMP()\")]),\n        (\"updated_at\", TIMESTAMP(), [Default(\"CURRENT_TIMESTAMP()\")])\n    ],\n    [\n        (\"userId\", NebulaAuth_User, \"id\", :belongsTo)\n    ]\n)","category":"page"},{"location":"manual/relationships/#Creating-and-Querying-Relationships","page":"Defining Relationships","title":"Creating and Querying Relationships","text":"","category":"section"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"After creating the models, you can create a profile for a user:","category":"page"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"profile = create(Profile, Dict(\n    \"userId\" => user.id,\n    \"bio\" => \"Software Engineer\",\n    \"location\" => \"Brazil\",\n    \"website\" => \"https://example.com\"\n))","category":"page"},{"location":"manual/relationships/#Query-Examples","page":"Defining Relationships","title":"Query Examples","text":"","category":"section"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"Fetch the profile by user id:\nprofile_user = findFirst(Profile; query=Dict(\"where\" => Dict(\"userId\" => user.id)))\nInclude the related model when querying a user:\nprofile_user_with_relation = findFirst(NebulaAuth_User; query=Dict(\"where\" => Dict(\"id\" => profile.userId), \"include\" => [Profile]))","category":"page"},{"location":"manual/relationships/","page":"Defining Relationships","title":"Defining Relationships","text":"This will return a user record with an embedded list of related profiles.","category":"page"},{"location":"Reference/API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"manual/security/#Security-Features","page":"Security Features","title":"Security Features","text":"","category":"section"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"NebulaAuth incorporates multiple security mechanisms to safeguard your application. This document outlines key security features.","category":"page"},{"location":"manual/security/#JWT-Based-Session-Handling","page":"Security Features","title":"JWT-Based Session Handling","text":"","category":"section"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"NebulaAuth uses JSON Web Tokens (JWT) for stateless authentication.","category":"page"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"Token Creation:   Generate a token after user authentication:\nusing NebulaAuth.JWT\ntoken = NebulaAuth.JWT.create_token(user)\nToken Verification:   Verify the authenticity of a token:\nvalid = NebulaAuth.JWT.verify_token(token)\nprintln(\"Token is valid: \", valid)","category":"page"},{"location":"manual/security/#Password-Security","page":"Security Features","title":"Password Security","text":"","category":"section"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"Hashing:   Passwords are securely hashed using SHA512 with salt.  \nVerification:   Use the internal function to verify password correctness during sign-in.","category":"page"},{"location":"manual/security/#Email-Confirmation-and-Password-Reset-(Upcoming)","page":"Security Features","title":"Email Confirmation and Password Reset (Upcoming)","text":"","category":"section"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"Email Confirmation:   Planned feature for secure token-based email verification during user registration.\nPassword Reset:   A secure workflow will be implemented to allow users to reset their password via a time-limited token.","category":"page"},{"location":"manual/security/#Additional-Security-Measures-(Upcoming)","page":"Security Features","title":"Additional Security Measures (Upcoming)","text":"","category":"section"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"Rate Limiting:   Prevent brute-force attacks by limiting the number of login attempts.\nMulti-Factor Authentication:   Future updates will include MFA for an extra layer of security.\nThird-Party Integration:   Support for OAuth/OpenID Connect for federated identity management.\nAudit Trails:   Detailed logging of security-related events for monitoring and compliance.","category":"page"},{"location":"manual/security/","page":"Security Features","title":"Security Features","text":"These features aim to bring NebulaAuth to production-ready security standards.","category":"page"},{"location":"#NebulaAuth.jl","page":"Home","title":"NebulaAuth.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Easy Authentication for Genie APIs.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Authentication using stateless token;\nAuthorization with RBAC;\nIntegration with NebulaORM.jl;","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
